{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","totalPages","Math","ceil","pages","className","classNames","disabled","href","onClick","map","item","active","items","App","useState","setPerPage","setCurrentPage","totalItems","length","firstItemOnPage","lastItemOnPage","visibleItems","slice","titleText","id","onChange","event","value","Number","target","htmlFor","page","ReactDOM","render","document","getElementById"],"mappings":"gMAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCIIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAaC,KAAKC,KAAKN,EAAQC,GAC/BM,EAAQd,EAAW,EAAGW,GAc5B,OACE,qBAAII,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAW,YAAa,CAAEC,SAA0B,IAAhBR,IAAnD,SACE,mBACE,UAAQ,WACRM,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBT,EACX,OACA,QACJU,QAtBsB,WACxBV,EAAc,GAChBC,EAAaD,EAAc,IAazB,oBAaDK,EAAMM,KAAI,SAAAC,GAAI,OACb,oBACEN,UAAWC,IAAW,YACpB,CAAEM,OAAQb,IAAgBY,IAF9B,SAKE,mBACE,UAAQ,WACRN,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMT,EAAaW,IAJ9B,SAMGA,KAREA,MAaT,oBAAIN,UAAWC,IAAW,YACxB,CAAEC,SAAUR,IAAgBE,IAD9B,SAGE,mBACE,UAAQ,WACRI,UAAU,YACVG,KAAK,QACL,gBAAeT,IAAgBE,EAC3B,OACA,QACJQ,QAjDsB,WACxBV,EAAcE,GAChBD,EAAaD,EAAc,IAwCzB,wBC/DFc,EAAQvB,EAAW,EAAG,IACzBoB,KAAI,SAAAhB,GAAC,qBAAYA,MAKPoB,EAAgB,WAC3B,MAA8BC,mBAJP,GAIvB,mBAAOjB,EAAP,KAAgBkB,EAAhB,KACA,EAAsCD,mBAJX,GAI3B,mBAAOhB,EAAP,KAAoBkB,EAApB,KAEMC,EAAaL,EAAMM,OACnBC,EAAmBtB,EAAUC,EAAeD,EAAU,EACtDuB,EAAiBvB,EAAUC,EAC3BuB,EAAY,YAAOT,EAAMU,MAAMH,EAAkB,EAAGC,IACpDG,EAAS,eAAWzB,EAAX,mBAAiCqB,EAAjC,cAAsDC,EAAiBH,EAClFA,EACAG,EAFW,eAEUH,EAFV,KAef,OACE,sBAAKb,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,SACGmB,IAGH,sBAAKnB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRoB,GAAG,kBACHpB,UAAU,eACVqB,SArBiB,SAACC,GAC1B,IAAMC,EAAQC,OAAOF,EAAMG,OAAOF,OAElCZ,EAAWY,GACXX,EAtByB,IAwCjBW,MAAO9B,EALT,UAOE,wBAAQ8B,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOG,QAAQ,kBAAkB1B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACER,MAAOqB,EACPpB,QAASA,EACTC,YAAaA,EACbC,aA5Ce,SAACgC,GACpBf,EAAee,MA8Cb,6BACGV,EAAaZ,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCvEjBsB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.807c098b.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const totalPages = Math.ceil(total / perPage);\n  const pages = getNumbers(1, totalPages);\n\n  const handlePrevButtonClick = () => {\n    if (currentPage > 1) {\n      onPageChange(currentPage - 1);\n    }\n  };\n\n  const handleNextButtonClick = () => {\n    if (currentPage < totalPages) {\n      onPageChange(currentPage + 1);\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames('page-item', { disabled: currentPage === 1 })}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={currentPage === 1\n            ? 'true'\n            : 'false'}\n          onClick={handlePrevButtonClick}\n        >\n          «\n        </a>\n      </li>\n\n      {pages.map(item => (\n        <li\n          className={classNames('page-item',\n            { active: currentPage === item })}\n          key={item}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${item}`}\n            onClick={() => onPageChange(item)}\n          >\n            {item}\n          </a>\n        </li>\n      ))}\n\n      <li className={classNames('page-item',\n        { disabled: currentPage === totalPages })}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={currentPage === totalPages\n            ? 'true'\n            : 'false'}\n          onClick={handleNextButtonClick}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { ChangeEvent, useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nconst DEFAULT_PER_PAGE = 5;\nconst DEFAULT_CURRENT_PAGE = 1;\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(DEFAULT_PER_PAGE);\n  const [currentPage, setCurrentPage] = useState(DEFAULT_CURRENT_PAGE);\n\n  const totalItems = items.length;\n  const firstItemOnPage = (perPage * currentPage) - perPage + 1;\n  const lastItemOnPage = perPage * currentPage;\n  const visibleItems = [...items.slice(firstItemOnPage - 1, lastItemOnPage)];\n  const titleText = `Page ${currentPage} (items ${firstItemOnPage} - ${lastItemOnPage > totalItems\n    ? totalItems\n    : lastItemOnPage} of ${totalItems})`;\n\n  const onPageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const handleSelectChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    const value = Number(event.target.value);\n\n    setPerPage(value);\n    setCurrentPage(DEFAULT_CURRENT_PAGE);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {titleText}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={handleSelectChange}\n            value={perPage}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={totalItems}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={onPageChange}\n      />\n\n      <ul>\n        {visibleItems.map(item => (\n          <li\n            data-cy=\"item\"\n            key={item}\n          >\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}